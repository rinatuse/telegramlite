from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from database import init_db, Topic, Question, QuestionOption
import os
from dotenv import load_dotenv
import logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


class TestBot:
    def __init__(self, token: str, admin_id: str):
        self.token = token
        self.admin_id = admin_id
        self.db = init_db()
        self.user_states = {}  # –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self._init_demo_data()

    def get_topics_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏ —Ç–µ—Å—Ç–æ–≤"""
        topics = self.db.query(Topic).all()
        keyboard = []
        for topic in topics:
            keyboard.append(
                [InlineKeyboardButton(topic.title, callback_data=f"topic_{topic.id}")]
            )
        return InlineKeyboardMarkup(keyboard)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ç–µ—Å—Ç–∞:"
        )
        await update.message.reply_text(
            welcome_text, reply_markup=self.get_topics_keyboard()
        )

    async def send_answer_statistics(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        user_id: int,
        username: str,
        question: str,
        user_answer: str,
        is_correct: bool,
        topic_title: str,
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        status = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        message = (
            f"üìä –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})\n"
            f"üìö –¢–µ–º–∞: {topic_title}\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å: {question}\n"
            f"üìù –û—Ç–≤–µ—Ç: {user_answer}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status}"
        )
        try:
            await context.bot.send_message(chat_id=self.admin_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    @staticmethod
    def generate_progress_bar(current, total, length=10):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        filled = int(length * (current / total))
        empty = length - filled
        return "‚ñà" * filled + "‚ñë" * empty

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "new_test":
            welcome_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ç–µ—Å—Ç–∞:"
            await query.edit_message_text(
                welcome_text, reply_markup=self.get_topics_keyboard()
            )
            return

        if query.data.startswith("topic_"):
            # –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
            topic_id = int(query.data.replace("topic_", ""))
            user_id = query.from_user.id

            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã
            questions = (
                self.db.query(Question).filter(Question.topic_id == topic_id).all()
            )

            if not questions:
                await query.edit_message_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."
                )
                return

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
            questions_data = []
            for question in questions:
                options = (
                    self.db.query(QuestionOption)
                    .filter(QuestionOption.question_id == question.id)
                    .all()
                )
                options_data = [
                    {"text": opt.text, "is_correct": opt.is_correct} for opt in options
                ]
                questions_data.append({"text": question.text, "options": options_data})

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_states[user_id] = {
                "questions": questions_data,
                "current_question": 0,
                "correct_answers": 0,
            }

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            await self.show_question(query.message, user_id)

        elif query.data.startswith("answer_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
            user_id = query.from_user.id
            username = query.from_user.username or f"User{user_id}"
            answer_index = int(query.data.replace("answer_", ""))

            if user_id not in self.user_states:
                await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
                return

            state = self.user_states[user_id]
            current_question = state["questions"][state["current_question"]]

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
            topic_id = state.get("topic_id")
            topic = self.db.query(Topic).filter(Topic.id == topic_id).first()
            topic_title = topic.title if topic else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            user_answer = current_question["options"][answer_index]["text"]
            is_correct = current_question["options"][answer_index]["is_correct"]

            await self.send_answer_statistics(
                context,
                user_id,
                username,
                current_question["text"],
                user_answer,
                is_correct,
                topic_title,
            )

            if is_correct:
                state["correct_answers"] += 1

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            state["current_question"] += 1
            if state["current_question"] >= len(state["questions"]):
                await self.show_results(query.message, user_id)
            else:
                await self.show_question(query.message, user_id)

    async def show_question(self, message, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
        state = self.user_states[user_id]
        question = state["questions"][state["current_question"]]

        if "topic_id" not in state:
            topic = (
                self.db.query(Topic)
                .filter(Topic.questions.any(text=question["text"]))
                .first()
            )
            if topic:
                state["topic_id"] = topic.id

        keyboard = []
        for i, option in enumerate(question["options"]):
            keyboard.append(
                [InlineKeyboardButton(option["text"], callback_data=f"answer_{i}")]
            )

        question_text = (
            f"–í–æ–ø—Ä–æ—Å {state['current_question'] + 1} –∏–∑ {len(state['questions'])}:\n\n"
            f"{question['text']}"
        )

        await message.edit_text(
            question_text, reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_results(self, message, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
        state = self.user_states[user_id]
        total_questions = len(state["questions"])
        correct_answers = state["correct_answers"]
        score = (correct_answers / total_questions) * 100

        progress_bar = self.generate_progress_bar(correct_answers, total_questions)

        result_text = (
            "üéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score:.1f}%\n\n"
        )

        keyboard = [
            [InlineKeyboardButton("üìù –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç", callback_data="new_test")]
        ]

        await message.edit_text(
            result_text, reply_markup=InlineKeyboardMarkup(keyboard)
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del self.user_states[user_id]

    def _init_demo_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db.query(Topic).first():
            from demo_data import DEMO_DATA

            for topic_data in DEMO_DATA["topics"]:
                topic = Topic(title=topic_data["title"])
                self.db.add(topic)
                self.db.commit()

                for question_data in topic_data["questions"]:
                    question = Question(topic_id=topic.id, text=question_data["text"])
                    self.db.add(question)
                    self.db.commit()

                    for option_data in question_data["options"]:
                        option = QuestionOption(
                            question_id=question.id,
                            text=option_data["text"],
                            is_correct=option_data["is_correct"],
                        )
                        self.db.add(option)
                    self.db.commit()


def main():
    load_dotenv()
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    admin_id = os.getenv("ADMIN_TELEGRAM_ID")

    if not token:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    if not admin_id:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω ADMIN_TELEGRAM_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    bot = TestBot(token, admin_id)
    application = Application.builder().token(bot.token).build()

    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CallbackQueryHandler(bot.button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()
